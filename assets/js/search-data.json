{
  
    
        "post0": {
            "title": "What I Learned From My First Serious Kaggle Competition",
            "content": "Introduction . Recently I decided that I want to be a Kaggle grand-master, and so I set it out to achieve this goal by breaking it down into multiple steps, the first of which was to win 3 medals (not necessarily gold) by the end of this year. . I participated in UW-Madison GI Tract Segmentation competition without knowing the first thing about semantic segmentation, and through steady effort I was able to win a silver medal and reach the 23rd place (out of 1565 teams - Top 2%). . But through out this time, I often felt unorganized in my approach and distracted by . The shear amount of mistakes and bugs in my code that I want to fix | The amount of things and possible improvements that I want to implement | The amount of things that I want to learn | What I learned . So along this way, I came up with a system that isn’t perfect, but currently suits the job. . Also, once the competition finished, I reflected upon this experience to extract some lessons to help me win more competitions, and hopefully you too. . Make notebook templates to store your code in an organized way . Through out a competition you’ll need 4 kinds of notebooks . A notebook for data exploration | A notebook for developing ideas | A notebook for experimental runs | A notebook for inference | Why do I think you need 4 notebooks? Well not exactly 4, it’s not carved on stone, but you need to organize your code in way that enables you to iterate quickly, and if all of your work is in just one notebook, you’ll find yourself distracted by the different parts you have in there. And whenever you try to reach a part or track something that you’ve written before, it’ll be a nightmare. . Package the code that you have tested to enable using it in multiple places . Now say that you have written some code and organized it into functions or classes, does it make sense to keep copying it around all of your notebooks? . Or say that you are using something other than kaggle notebooks, does it make sense to copy all of your helper functions in your kaggle notebook? . That doesn’t make any sense. What makes sense is that you package any code that you have written and tested into a local package, and maybe you can even upload that package as a dataset, so whenever you are switching over to kaggle notebooks, you know that your functions will be there too without copying and pasting anything. . Develop a robust validation plan . . What good are your ideas if you can’t test them? If you don’t have good CV, then you are basically sacrificing your precious work down the drain. . If you only follow the public LB, you might get shaken up in the end. What you need to do instead is . Read the competition guidelines and try to replicate their validation strategy | Engage in the discussion forums with other participants and ask about CV if there is something that you don’t get | Take some time in the early days to validate the your validation plan by making arbitrary submissions and check CV - LB score correlation | Keep a log to track what you did on a daily basis . Some days you’ll feel a little bit under the weahter, and maybe you’ll go check the LB and see that your rank is low. . You’ll take a look at the top X% of the LB and compare yourself. . You might feel that it’s hopeless to even try, because look at these people, they must be geniuses, and I’m struggling to move up my rank by 1 position. . Please don’t do that. Don’t compare yourself to others, and to avoid that, I suggest keeping a log of everything you do in the competition everyday. . Log every idea you have, every little win you made, every bug you fixed, etc.. . . A log will help you see the trail of compound improvements that you have made since starting the competition, and by the end you’ll be astonished by what you have achieved. . It’s okay to check the leader-board, but don’t get sucked into it. Instead, check this log and be proud of yourself. Compare yourself only with your past self and just keep on making little steps and wins one day at a time. . Keep a list of any improvement and ideas that come to mind or that you have read which you can try . Often times you’ll get some new ideas that you want to implement, and you might be implementing something just to get a new idea while doing that or based on the results of that idea. . That’s why I suggest keeping a list with literally every idea that you get. . Sometimes you’ll have more ideas that you can implement, and sometimes you’ll have a shortage of ideas, which is why keeping a list is paramount to continuous improvement. . Keep a list of any problem that faces you and prioritize solving them . This goes without saying, once a problem occurs you have to make it top priority to solve. Once a problem occurs during submission, like a notebook timeout, or running out of memory, you need to prioritize fixing, or at least understanding why that happens. . Sometimes you can postpone fixing that, and then you might find later that your approach is incompatible and unsuitable for submission. . So to avoid wasting time and energy, find the root cause of any problem that occurs and prioritize fixing it. . Keep a list of the things that you need to educate yourself about . Often times you’ll find that you don’t understand something, and it can become overwhelming because this often times for me is like every 5 lines of code when I’m reading someone’s notebook. . So why not keep a list of everything you don’t understand? . Like when you are reading someone’s notebook, a blog post, or a previous competition winning solution. Whenever you encounter something that you don’t understand, add it to the the list, or a list particular to this thing you are reading, and then tackle it one by one. . You’ll find that it was easier than you expected, but the shear amount of things that you don’t know can sometimes be overwhelming. . And if there is something that I want you to take out of this post in general, it is to take everything one step at a time. . Make a plan based on the three lists that you have for what you should be doing in the next X days . In kaggle competitions (and maybe in life in general), the perfect is the enemy of the good. . Without a plan you’ll find that you are distracted, and whenever you gather the will required to do something, you might procrastinate while saying that maybe what you are trying to implement, learn or fix isn’t going to improve your results anyway. . That’s where a plan comes into place. By now if you have the lists we were talking about, you already know some stuff which you should work on. . So make a plan, and start working on it. Period. . What if that didn’t work out as planned? Well, I guarantee you that most of the time, it won’t work out as planned, but you never know what you don’t know unless you try it. . Sometimes one step of your plan might open up a road that you didn’t know exist, and sometimes a failure or a bug can teach you lessons that you might have not learned otherwise. . The point is, you will be the winner every single time. . So make a plan, follow it, update it based on what you find, and repeat. . Set a daily time to scan through new notebooks and discussions for any new ideas or information and jot them down in your log and lists accordingly . I can’t emphasize enough how important is this. The beautiful thing about these competitions is that you’ll often find people think a little bit different than you. . That’s why keeping an open mind while checking the discussion and notebooks is an amazing way to generate new ideas, and maybe be borrow some. . Sometimes you’ll find ideas so simple can provide tremendous improvements, and they haven’t even crossed your mind. . One thing that I found pretty useful too is to sift through similar old competitions notebooks and discussions for useful information, and often times you’ll find some hidden gems. . For example, while working on data augmentation, I didn’t know where to start, and I thought the augmentations used in the public notebook of the competition were either too basic, or too complicated. . So while looking into a previous competition winning solutions, I found a nice augmentation pipeline, so I tested that, and with a little tweaks I found that my models trained better. . Believe in yourself . . I personally find this step a little bit hard, and I don’t know about you. But if you believe that you can’t be winner, you probably won’t be. . That’s not because you can’t actually be a winner, but because you won’t see the ways that can make you one. . Over confidence is never good, but under selling yourself and having low self esteem won’t get you anywhere either. . Instead, understand your weaknesses and develop them. . Know your strengths and improve them. . Understand that now one is born with kaggle gold medal (of course some people find it easier that others), but most people start somewhere, and if they want to improve their positioning, they work on themselves and do it. . TL;DR . Make notebook templates to store your code in an organized way. | Package the code that you have tested to enable using it in multiple places. | Explore and develop and robust CV | Keep a log to track what you did on a daily basis | Keep a list of any improvement and ideas that come to mind or that you have read which you can try | Keep a list of any problem that faces you and prioritize solving them | Keep a list of the things that you need to educate yourself about | Begin everyday by reviewing the log to motivate yourself about the stuff that you have already worked on | Always make a plan based on the three lists that you have for what you should be doing in the next 3 days for example to avoid feeling distracted by all the information | Set a daily time to scan through new notebooks and discussions for any new ideas or information and jot them down in your log and lists accordingly | Don’t watch your models train | Last but not least, believe in yourself. |",
            "url": "https://ahmedsamirio.github.io/blog/markdown/2022/07/16/kaggle-tips.html",
            "relUrl": "/markdown/2022/07/16/kaggle-tips.html",
            "date": " • Jul 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ahmedsamirio.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ahmedsamirio.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "A budding data scientist, currently focused on deep learning (with even more focus on computer vision). . I’ve won a silver medal in UW-Madison GI Tract Segmentation competition and implemented some general projects in various domains while building my knowledge base. . I’m originally a pharmacist, so I still find myself more prone to work on competitions and problems rooted in the medical domain, but I’m open to work in any domain that I find interesting. . Contact me . ahmedsamirio95@gmail.com . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ahmedsamirio.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ahmedsamirio.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}